module Servactory
  class Result
    @context: instance?
    @collection_of_outputs: Outputs::Collection?
    @exception: Exception?

    def self.success_for: (*untyped) -> self

    def self.failure_for: (*untyped) -> self

    def initialize: (?context: instance?, ?collection_of_outputs: Outputs::Collection?, ?exception: Exception?) -> void

    def method_missing: (Symbol name, *untyped args) { () -> untyped } -> void

    def respond_to_missing?: (Symbol name, *untyped) -> void

    def inspect: () -> String

    private

    def as_success: () -> self

    def as_failure: () -> self

    def draw_result: () -> String

    def output_value_for: (Outputs::Output output) -> untyped
  end
end
