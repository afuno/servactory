module Servactory
  module InputArguments
    class InputArgument
      ARRAY_DEFAULT_VALUE: ^(is: bool, message: Proc | String | nil) -> { is: bool, message: String | nil }

      attr_reader inclusion: Array[untyped] | nil
      attr_reader must: Hash[Symbol, { is: Proc, message: (Proc | String | nil) }] | nil
      attr_reader name: Symbol

      attr_reader types: Array[Class]

      attr_reader required: bool

      attr_reader array: { is: bool, message: Proc | String | nil }

      attr_reader internal: bool

      attr_reader default: untyped

      def initialize: (Symbol name, collection_of_options: Array[Option], type: Class, **untyped options) -> void

      def add_array_option_to: (Array[Option] collection_of_options, untyped options) -> Array[Option]

      def add_basic_options_to: (Array[Option] collection_of_options, untyped options) -> void

      def add_default_option_to: (Array[Option] collection_of_options, untyped options) -> Array[Option]

      def add_inclusion_option_to: (Array[Option] collection_of_options, untyped options) -> Array[Option]

      def add_internal_option_to: (Array[Option] collection_of_options, untyped options) -> Array[Option]

      def add_must_option_to: (Array[Option] collection_of_options, untyped options) -> Array[Option]

      def add_required_option_to: (Array[Option] collection_of_options, untyped options) -> Array[Option]

      def must_present?: -> bool

      def prepare_advanced_for: -> { is: bool, message: Proc | String | nil }

      def with_conflicts?: -> bool

      def conflict_code: -> (Symbol | nil)

      def inclusion_present?: -> bool

      def options_for_checks: () -> { types: Array[Class], inclusion: Array[untyped] | nil, must: Hash[Symbol, { is: Proc, message: (Proc | String | nil) }] | nil, required: bool, default: untyped }

      def array?: () -> bool

      def required?: () -> bool

      def optional?: () -> bool

      def internal?: () -> bool

      def default_value_present?: () -> bool
    end
  end
end
